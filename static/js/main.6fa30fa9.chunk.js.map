{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAGaA,G,MAAO,SAAAC,GAAK,OACzB,sBAAKC,UAAU,iBAAf,UACI,qBACAC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAGH,mCAAML,EAAMI,QAAQE,QACpB,kCAAKN,EAAMI,QAAQG,cCPVC,G,MAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC1B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCHZM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACxB,uBACAZ,UAAW,SACXa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCqCCG,G,wDAtCd,aAAe,IAAD,8BACb,gBAEOC,MAAQ,CACXR,SAAW,GACXS,YAAc,IALL,E,gEASK,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAASc,S,+BAG5B,IAAD,SAKyBE,KAAKR,MAA/BR,EALC,EAKDA,SAAUS,EALT,EAKSA,YACXQ,EAAmBjB,EAASkB,QAAQ,SAAAlB,GAAQ,OAChDA,EAASH,KAAKsB,cAAcC,SAASX,EAAYU,kBAInD,OACA,sBAAK3B,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CACEW,YAAY,oBACZC,aAAc,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAAEN,YAAaY,EAAEC,OAAOC,WAE3D,cAAC,EAAD,CAAUvB,SAAUiB,W,GAlCRO,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6fa30fa9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n<div className=\"card-container\">\r\n    <img \r\n    alt=\"monster\" \r\n    src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n    />\r\n    \r\n    <h2> {props.monster.name}</h2>\r\n    <p> {props.monster.email}</p>\r\n</div>\r\n);","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => (\r\n    <div className='card-list'>\r\n        {props.monsters.map(monster => (\r\n         <Card key={monster.id} monster={monster} />\r\n        ))}\r\n    </div>\r\n);"," import React from 'react';\r\n import './search-box.styles.css';\r\n\r\n   // un component funzionale prende dei props e restituisce dell'html\r\n   export const SearchBox = ({placeholder, handleChange}) => (\r\n    <input \r\n    className ='search'\r\n    type='search' \r\n    placeholder={placeholder} \r\n    onChange={handleChange}\r\n         \r\n  />\r\n\r\n  );","import React, {Component} from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\n\n\nclass App extends Component {\n constructor() {\n  super();\n\n    this.state = {\n      monsters : [],\n      searchField : ''\n    };\n}\n\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(users => this.setState({monsters:users}));\n  }\n\n   render() {\n  \n    \n    // const monster = this.state.monsters;\n    // const searchField = this.state.searchField; al posto di scrivere cosi semplifico ....\n    const {monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter (monsters => \n      monsters.name.toLowerCase().includes(searchField.toLowerCase()) //toLowerCase per il render e per stare sicuri nel caso si scriva con in maiuscolo\n      )\n\n  \n    return (\n    <div className=\"App\">\n      <h1>I mostri di React</h1>\n      <SearchBox\n        placeholder='Ricerca il mostro' \n        handleChange={e => this.setState({ searchField: e.target.value} )}\n        />\n      <CardList monsters={filteredMonsters}/>               \n    </div>\n   );\n }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}